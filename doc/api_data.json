[  {    "type": "post",    "url": "/",    "title": "Create a new Announcement",    "name": "CreateNewAnnouncement",    "group": "Announcements",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "author",            "description": "<p>The author of the announcement.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "title",            "description": "<p>The title of the announcement.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "content",            "description": "<p>The content of the announcement.</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "isVotable",            "description": "<p>True if the announcement is votable.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "announcement",            "description": "<p>The announcement object.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"announcement\": \n      {\n            title: 'Hello World',\n            content: 'abcde',\n            author: 'Lara Marie Reimer',\n            creationDate: '19/05/2018',\n            isVotable: false,\n            upvotes: [],\n            downvotes: []\n        }\n   }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "BadRequest",            "description": "<p>The request body must contain an author, a title and whether it is votable or not.</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Not Found\n{\n      \"error\": \"Bad Request\",\n      \"message\": \"The request body must contain an author and a title and whether it is votable or not.\"\n   }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/controllers/announcement-controller.js",    "groupTitle": "Announcements"  },  {    "type": "get",    "url": "/announcements",    "title": "Get all Announcements",    "name": "GetAllAnnouncements",    "group": "Announcements",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Array",            "optional": false,            "field": "announcements",            "description": "<p>Array of announcement objects.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"announcements\": \n      [ \n          {\n            title: 'Hello World',\n            content: 'abcde',\n            author: 'Lara Marie Reimer',\n            creationDate: '19/05/2018',\n            isVotable: false,\n            upvotes: [],\n            downvotes: []\n        }\n      ]\n   }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "BadRequest",            "description": "<p>Generic error. Could not get announcements.</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Not Found\n{\n      \"error\": \"Bad Request\",\n      \"message\": \"Generic error. Could not get announcements.\"\n   }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/controllers/announcement-controller.js",    "groupTitle": "Announcements"  },  {    "type": "post",    "url": "/auth/login",    "title": "Login",    "name": "LoginUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>Users unique email address.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>Users password.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>Access token for the User.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVhZmM0N2YxMjM0ZDcyNGJjNGM5MGI0NCIsImlhdCI6MTUyNjU0NzU0MywiZXhwIjoxNTI2NjMzOTQzfQ.dKr6_xu8PMnBtd09Iu8Sp6dAQoYLW258AhJzbeHMx8M\"\n   }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "BadRequest",            "description": "<p>The request body must contain a password/email property.</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Not Found\n{\n      \"error\": \"Bad Request\",\n      \"message\": \"The request body must contain a password property\"\n   }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/controllers/auth.js",    "groupTitle": "User"  },  {    "type": "get",    "url": "/auth/logout",    "title": "Logout",    "name": "LogoutUser",    "group": "User",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "null",            "optional": false,            "field": "token",            "description": "<p>Always returns null.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n    {\n    \"token\": null\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/controllers/auth.js",    "groupTitle": "User"  },  {    "type": "get",    "url": "/auth/me",    "title": "Me",    "name": "MeUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Users id.</p>"          }        ]      }    },    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "x-access-token",            "description": "<p>token provided by the login.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>user id.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"_id\": \"5afc47f1234d724bc4c90b44\"\n   }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "Unauthorized",            "description": "<p>Token is not viable.</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 unauthorized\n{\n    \"error\": \"Unauthorized\",\n    \"message\": \"Failed to authenticate token.\"\n  }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/controllers/auth.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/auth/register",    "title": "Register",    "name": "RegisterUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email",            "description": "<p>Users unique email address.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>Users password.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Name the User would prefer to use</p>"          },          {            "group": "Parameter",            "type": "Date",            "optional": true,            "field": "dateOfBirth",            "description": "<p>Date of birth for the User</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "roles",            "defaultValue": "user",            "description": "<p>Array of Roles. Can be 'admin','user' or both</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>Access token for the User.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n      \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVhZmM0N2YxMjM0ZDcyNGJjNGM5MGI0NCIsImlhdCI6MTUyNjU0NzU0MywiZXhwIjoxNTI2NjMzOTQzfQ.dKr6_xu8PMnBtd09Iu8Sp6dAQoYLW258AhJzbeHMx8M\"\n   }",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "BadRequest",            "description": "<p>The request body must contain a password/email/name property.</p>"          }        ]      },      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 400 Not Found\n{\n      \"error\": \"Bad Request\",\n      \"message\": \"The request body must contain a password property\"\n   }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "src/controllers/auth.js",    "groupTitle": "User"  }]
